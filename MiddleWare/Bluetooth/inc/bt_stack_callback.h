//////////////////////////////////////////////////////////////////
//
// bt_stack_callback.h
//

#ifndef __BT_STACK_CALLBACK_H__
#define __BT_STACK_CALLBACK_H__

#include "bt_avrcp_api.h"
#include "bt_common_api.h"
#include "bt_hid_api.h"

typedef enum 
{
	BT_STACK_EVENT_NONE = 0,

	/*******************************************
	 * Common event define - start
	 *******************************************/
	BT_STACK_EVENT_COMMON_EVENT_START,

	/**
	 *@brief
	 * The stack is initialized
	 *
	 *@note
	 * No params
	 */
	BT_STACK_EVENT_COMMON_STACK_INITIALIZED,

	/**
	 *@brief
	 * The stack has been uninitialized
	 *
	 *@note
	 * No params
	 */
	BT_STACK_EVENT_COMMON_STACK_UNINITIALIZED,

	/**
	 *@brief
	 * A remote device is found.
	 *
	 *@note
	 * params.inquiryResult is vaild
	 */
	BT_STACK_EVENT_COMMON_INQUIRY_RESULT,

	/**
	 *@brief
	 * The inquiry process is completed.
	 *
	 *@note
	 * No params
	 */
	BT_STACK_EVENT_COMMON_INQUIRY_COMPLETE,

	/**
	 *@brief
	 * The inquiry process is cancelled.
	 *
	 *@note
	 * No params
	 */
	BT_STACK_EVENT_COMMON_INQUIRY_CANCELED,

	/**
	 *@brief
	 * Indicate the mode of the link changed.
	 *
	 *@note
	 * params.modeChange is vaild
	 */
	BT_STACK_EVENT_COMMON_MODE_CHANGE,

	/**
	 *@brief
	 * Indicate the name of a remote device
	 *
	 *@note
	 * params.remDevName is vaild
	 */
	BT_STACK_EVENT_COMMON_GET_REMDEV_NAME,

	/**
	 *@brief
	 * Indicate that an accessibility change is complete.
	 *
	 *@note
	 * params.accessMode is vaild.
	 */
	BT_STACK_EVENT_COMMON_ACCESS_MODE,

	/**
	 * Common event define - end
	 */
	BT_STACK_EVENT_COMMON_EVENT_END,

	/*Trust list*/
	BT_STACK_EVENT_TRUST_LIST_EVENT_START,
	BT_STACK_EVENT_TRUST_LIST_ADD_NEW_RECORD,
	BT_STACK_EVENT_TRUST_LIST_DELETE_RECORD,
	BT_STACK_EVENT_TRUST_LIST_EVENT_END,


	/*******************************************
	 * A2DP event define - start
	 *******************************************/
	BT_STACK_EVENT_A2DP_EVENT_START,

	/**
	 *@brief
	 * Indicate a stream is opened
	 *
	 *@note
	 * params.bd_addr is vaild, which is the bluetooth address
	 * of the remote devices.
	 */
	BT_STACK_EVENT_A2DP_CONNECTED,

	/**
	 *@brief
	 * Indicate the stream is closed
	 *
	 *@note
	 * No params
	 */
	BT_STACK_EVENT_A2DP_DISCONNECTED,

	/**
	 *@brief
	 * Indicate connecting to remote device is timeout
	 * This event only can be generated by A2dpConnect()
	 *
	 *@note
	 * No params
	 */
	BT_STACK_EVENT_A2DP_CONNECT_TIMEOUT,

	/**
	 *@brief
	 * The stream has been started.
	 *
	 *@note
	 * No params
	 */
	BT_STACK_EVENT_A2DP_STREAM_START,

	/**
	 *@brief
	 * The stream is suspend
	 *
	 *@note
	 * No params
	 */
	BT_STACK_EVENT_A2DP_STREAM_SUSPEND,

	/**
	 *@brief
	 * The stream data arrived
	 *
	 *@note
	 * params.a2dpStreamData is vaild
	 * paramsLen is vaild, which indacate the length of a2dpStreamData
	 *
	 */
	BT_STACK_EVENT_A2DP_STREAM_DATA_IND,

	/**
	 * A2dp event define - end
	 */
	BT_STACK_EVENT_A2DP_EVENT_END,


	/*******************************************
	 * AVRCP event define - start
	 *******************************************/
	BT_STACK_EVENT_AVRCP_EVENT_START,
	BT_STACK_EVENT_AVRCP_CONNECTED,
	BT_STACK_EVENT_AVRCP_DISCONNECTED,
	BT_STACK_EVENT_AVRCP_ADV_PLAY_STATUS,
	BT_STACK_EVENT_AVRCP_ADV_TRACK_INFO,
	BT_STACK_EVENT_AVRCP_ADV_PLAY_POSITION,
	BT_STACK_EVENT_AVRCP_ADV_BATTERY_STATUS,
	BT_STACK_EVENT_AVRCP_ADV_APP_SETTINGS,
	BT_STACK_EVENT_AVRCP_ADV_PLAYING_CONTENT,
	BT_STACK_EVENT_AVRCP_ADV_AVAILABLE_PLAYERS,
	BT_STACK_EVENT_AVRCP_ADV_ADDRESSED_PLAYERS,
	BT_STACK_EVENT_AVRCP_ADV_UIDS,

	BT_STACK_EVENT_AVRCP_ADV_CAPABILITY_COMPANY_ID,
	BT_STACK_EVENT_AVRCP_ADV_CAPABILITY_EVENTS_SUPPORTED,

	BT_STACK_EVENT_AVRCP_ADV_VOLUME_CHANGE,
	BT_STACK_EVENT_AVRCP_EVENT_END,

	/*******************************************
	 * HFP event define - start
	 *******************************************/
	BT_STACK_EVENT_HFP_EVENT_START,
	BT_STACK_EVENT_HFP_CONNECTED,
	BT_STACK_EVENT_HFP_DISCONNECTED,
	BT_STACK_EVENT_HFP_SCO_CONNECTED,
	BT_STACK_EVENT_HFP_SCO_DISCONNECTED,
	BT_STACK_EVENT_HFP_SCO_DATA_RECEIVED,
	BT_STACK_EVENT_HFP_SCO_DATA_SENT,
	BT_STACK_EVENT_HFP_CALL_CONNECTED,
	BT_STACK_EVENT_HFP_CALL_DISCONNECTED,
	BT_STACK_EVENT_HFP_CALLSETUP_NONE,
	BT_STACK_EVENT_HFP_CALLSETUP_IN,
	BT_STACK_EVENT_HFP_CALLSETUP_OUT,
	BT_STACK_EVENT_HFP_CALLSETUP_ALERT,
	BT_STACK_EVENT_HFP_RING,
	BT_STACK_EVENT_HFP_CALLER_ID_NOTIFY,
	BT_STACK_EVENT_HFP_CURRENT_CALLS,
	BT_STACK_EVENT_HFP_CALL_WAIT_NOTIFY,
	BT_STACK_EVENT_HFP_SPEAKER_VOLUME,
	BT_STACK_EVENT_HFP_BATTERY,
	BT_STACK_EVENT_HFP_SIGNAL,
	BT_STACK_EVENT_HFP_ROAM,
	BT_STACK_EVENT_HFP_VOICE_RECOGNITION,
	BT_STACK_EVENT_HFP_IN_BAND_RING,
	BT_STACK_EVENT_HFP_CODEC_TYPE,
	BT_STACK_EVENT_HFP_MANUFACTORY_INFO,
	BT_STACK_EVENT_HFP_DEVICE_TYPE,
	BT_STACK_EVENT_HFP_UNSOLICITED_DATA,
	BT_STACK_EVENT_HFP_EVENT_END,


	/*******************************************
	 * MFi event define - start
	 *******************************************/
	BT_STACK_EVENT_MFI_EVENT_START,
	/**
	 * @brief
	 * This event will be received when MFi channel connected
	 * the union params.bd_addr is vaild
	 */
	BT_STACK_EVENT_MFI_CONNECTED,

	/**
	 * @brief
	 * This event will be received when MFi channel disconnected
	 */
	BT_STACK_EVENT_MFI_DISCONNECTED,

	/**
	 * @brief
	 * This event will be received when data arrived in MFi channel
	 * the union params.mfiReceivedData is vaild and paramsLen indicate
	 * the length of mfiReceivedData
	 */
	BT_STACK_EVENT_MFI_DATA_RECEIVED,

	/**
	 * @brief
	 * This event will be received when data has been sent to RF controller
	 * the union params.mfiSentData is vaild and paramsLen indicate
	 * the length of data sent.
	 *
	 * @note
	 * The memory alloced by the data can be release here.
	 */
	BT_STACK_EVENT_MFI_DATA_SENT,

	/**
	* MFi event define - end
	*/
	BT_STACK_EVENT_MFI_EVENT_END,



	/*******************************************
	 * SPP event define - start
	 *******************************************/
	BT_STACK_EVENT_SPP_EVENT_START,
	BT_STACK_EVENT_SPP_CONNECTED,
	BT_STACK_EVENT_SPP_DISCONNECTED,
	BT_STACK_EVENT_SPP_DATA_RECEIVED,
	BT_STACK_EVENT_SPP_DATA_SENT,
	BT_STACK_EVENT_SPP_EVENT_END,

	/*******************************************
	 * HID event define - start
	 *******************************************/
	BT_STACK_EVENT_HID_EVENT_START,
	
	/**
	 *@biref
	 *	HID channel connected. Only if control and interrupt
	 *	channel are both connected.
	 *	The union params.bd_addr is vaild
	 */
	BT_STACK_EVENT_HID_CONNECTED,

	/**
	 *@biref
	 *	HID channel disconnected. Only if control and interrupt
	 *	channel are both disconnected.
	 *	The union params.bd_addr is vaild
	 */	
	BT_STACK_EVENT_HID_DISCONNECTED,

	/**
	 *@biref
	 *	HID channel receives data. 
	 *	The params.hidData->channel indicate which channel (control
	 *	or interupte channel) has received the data
	 *	The union params.hidData->data indicate the data
	 *	The union params.hidData->dataLen indicate the length of
	 *	received data.And the paramsLen is equal to dataLen.
	 */ 
	BT_STACK_EVENT_HID_DATA_RECEIVED,

	/**
	 *@biref
	 *	HID channel has sent the data. 
	 *	The union params.hidData is vaild and the data in hidData
	 *	can be released or reused in this callback event.
	 */ 
	BT_STACK_EVENT_HID_DATA_SENT,
	BT_STACK_EVENT_HID_EVENT_END,

} BT_STACK_EVENT;


typedef struct _BT_STACK_CALLBACK_PARAMS
{
	uint16_t					paramsLen;
	bool						status;
	uint16_t					errorCode;

	union
	{
		uint8_t 				*bd_addr;
		InquriyResultParam		inquiryResult;
		ModeChange				modeChange;
		RequestRemNameParam		remDevName;
		BtAccessMode			accessMode;

		uint8_t 				*a2dpStreamData;

		const char				*hfpPhoneNumber;
		uint8_t					hfpVolGain;
		uint8_t					hfpBattery;
		uint8_t					hfpSignal;
		bool					hfpRoam;
		bool					hfpVoiceRec;
		bool					hfpInBandRing;
		uint8_t 				*hfpUnsolicitedData;
		const char				*hfpRemoteManufactory;
		const char				*hfpRemoteDeviceType;
		uint8_t 				*scoReceivedData;
		uint8_t 				*scoSentData;
		uint8_t					scoCodecType;

		AvrcpAdvParam			avrcpAdv;

		uint8_t					*sppReceivedData;
		uint8_t					*sppSentData;

		uint8_t					*mfiReceivedData;
		uint8_t					*mfiSentData;

		HidData					*hidData;
	} params;
}BT_STACK_CALLBACK_PARAMS;

#endif //__BT_STACK_CALLBACK_H__
